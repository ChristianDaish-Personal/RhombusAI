{"ast":null,"code":"var _jsxFileName = \"/Users/christiandaish/PycharmProjects/rhombusdataProject/rhombus-front-app/src/fileupload.js\",\n  _s = $RefreshSig$();\n//This component allows for the upload and display of .xlsx and .csv files. It also passes and receives data to/from the Django API.\nimport React, { useState, useRef } from 'react';\nimport Papa from 'papaparse';\nimport * as XLSX from 'xlsx';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Fileupload({\n  onFileLoad,\n  onUploadSuccess,\n  onUploadError,\n  onResetProcessedData,\n  thresholdVar\n}) {\n  _s();\n  const [file, setFile] = useState(null);\n  const fileInputRef = useRef(null);\n  const handleFileChange = event => {\n    const selectedFile = event.target.files[0];\n    if (onResetProcessedData) {\n      onResetProcessedData();\n    } //clear processed data input\n\n    if (selectedFile) {\n      const fileExt = selectedFile.name.split('.').pop();\n      if (fileExt === 'csv') {\n        // Parse CSV file\n        Papa.parse(selectedFile, {\n          complete: result => {\n            onFileLoad(result.data);\n            setFile(selectedFile);\n          },\n          header: false\n        });\n      } else if (fileExt === 'xlsx') {\n        // console.log(\"here\");\n        // Parse XLSX file\n        const reader = new FileReader();\n        reader.onload = e => {\n          const bstr = e.target.result;\n          const wb = XLSX.read(bstr, {\n            type: 'binary'\n          });\n          const wsname = wb.SheetNames[0];\n          const ws = wb.Sheets[wsname];\n          const data = XLSX.utils.sheet_to_json(ws, {\n            header: 1\n          });\n          onFileLoad(data);\n          setFile(selectedFile);\n        };\n        reader.readAsBinaryString(selectedFile);\n      } else {\n        // If the file is not CSV or XLSX, just set the file\n        setFile(selectedFile);\n      }\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (onResetProcessedData) {\n      onResetProcessedData(); //Reset processed data state\n    }\n    if (!file) {\n      alert('Please select a file first.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('threshold_var', thresholdVar);\n    try {\n      const response = await axios.post('http://localhost:8000/api/upload/', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log('File uploaded successfully', response.data);\n      if (onUploadSuccess) {\n        onUploadSuccess(response.data); // Now passing the whole response data back\n      }\n      setFile(null);\n      fileInputRef.current.value = \"\"; // Clear the file input\n    } catch (error) {\n      const errorMessage = error.response && error.response.data && error.response.data.error ? error.response.data.error : 'An unexpected error occurred';\n      if (onUploadError) {\n        onUploadError(errorMessage); // Use the onUploadError prop to pass the error message up\n      } else {\n        console.error('Error uploading file', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        ref: fileInputRef,\n        accept: \".csv, .xlsx\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Process Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n_s(Fileupload, \"kNILOh2iWJ4R/9q826rTQ3S5DBI=\");\n_c = Fileupload;\nexport default Fileupload;\nvar _c;\n$RefreshReg$(_c, \"Fileupload\");","map":{"version":3,"names":["React","useState","useRef","Papa","XLSX","axios","jsxDEV","_jsxDEV","Fileupload","onFileLoad","onUploadSuccess","onUploadError","onResetProcessedData","thresholdVar","_s","file","setFile","fileInputRef","handleFileChange","event","selectedFile","target","files","fileExt","name","split","pop","parse","complete","result","data","header","reader","FileReader","onload","e","bstr","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","readAsBinaryString","handleSubmit","preventDefault","alert","formData","FormData","append","response","post","headers","console","log","current","value","error","errorMessage","children","onSubmit","onChange","ref","accept","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/christiandaish/PycharmProjects/rhombusdataProject/rhombus-front-app/src/fileupload.js"],"sourcesContent":["//This component allows for the upload and display of .xlsx and .csv files. It also passes and receives data to/from the Django API.\nimport React, { useState, useRef } from 'react';\nimport Papa from 'papaparse';\nimport * as XLSX from 'xlsx';\nimport axios from 'axios';\n\nfunction Fileupload({ onFileLoad, onUploadSuccess, onUploadError, onResetProcessedData, thresholdVar }) {\n    const [file, setFile] = useState(null);\n    const fileInputRef = useRef(null);\n\n    const handleFileChange = (event) => {\n        const selectedFile = event.target.files[0];\n        if(onResetProcessedData){onResetProcessedData()\n        } //clear processed data input\n\n        if (selectedFile) {\n            const fileExt = selectedFile.name.split('.').pop();\n            if (fileExt === 'csv') {\n                // Parse CSV file\n                Papa.parse(selectedFile, {\n                    complete: (result) => {\n                        onFileLoad(result.data);\n                        setFile(selectedFile);\n                    },\n                    header: false,\n                });\n            } else if (fileExt === 'xlsx') {\n                // console.log(\"here\");\n                // Parse XLSX file\n                const reader = new FileReader();\n                reader.onload = (e) => {\n                    const bstr = e.target.result;\n                    const wb = XLSX.read(bstr, { type: 'binary' });\n                    const wsname = wb.SheetNames[0];\n                    const ws = wb.Sheets[wsname];\n                    const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n                    onFileLoad(data);\n                    setFile(selectedFile);\n                };\n                reader.readAsBinaryString(selectedFile);\n            } else {\n                // If the file is not CSV or XLSX, just set the file\n                setFile(selectedFile);\n            }\n        }\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (onResetProcessedData){onResetProcessedData(); //Reset processed data state\n        }\n        if (!file) {\n            alert('Please select a file first.');\n            return;\n        }\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('threshold_var',thresholdVar)\n        try {\n            const response = await axios.post('http://localhost:8000/api/upload/', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            });\n            console.log('File uploaded successfully', response.data);\n            if (onUploadSuccess) {\n                onUploadSuccess(response.data); // Now passing the whole response data back\n            }\n            setFile(null);\n            fileInputRef.current.value = \"\"; // Clear the file input\n        } catch (error) {\n            const errorMessage = error.response && error.response.data && error.response.data.error\n                                 ? error.response.data.error\n                                 : 'An unexpected error occurred';\n            if (onUploadError) {\n                onUploadError(errorMessage); // Use the onUploadError prop to pass the error message up\n            } else {\n                console.error('Error uploading file', error);\n            }\n          }\n    };\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input type=\"file\" onChange={handleFileChange} ref={fileInputRef} accept=\".csv, .xlsx\" />\n                <button type=\"submit\">Process Data</button>\n            </form>\n        </div>\n    );\n}\n\nexport default Fileupload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}